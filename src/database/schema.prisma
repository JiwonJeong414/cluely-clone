generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./wingman.db"
}

model User {
  id          String   @id @default(cuid())
  uid         String   @unique
  email       String
  displayName String
  photoURL    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  driveConnection     DriveConnection?
  documents          Document[]
  documentEmbeddings DocumentEmbedding[]
  chats              Chat[]
  cleanupActivities  CleanupActivity[]
  organizationActivities OrganizationActivity[]

  @@map("users")
}

model DriveConnection {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  isConnected  Boolean   @default(true)
  connectedAt  DateTime  @default(now())
  lastSyncAt   DateTime?
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("drive_connections")
}

model Document {
  id           String    @id @default(cuid())
  driveId      String    @unique
  name         String
  mimeType     String
  modifiedTime DateTime
  size         Int?
  webViewLink  String?
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model DocumentEmbedding {
  id          String   @id @default(cuid())
  fileId      String
  fileName    String
  content     String
  embedding   String   // JSON array stored as string
  metadata    String?  // JSON metadata
  chunkIndex  Int      @default(0)
  userId      String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fileId, chunkIndex])
  @@map("document_embeddings")
}

model Chat {
  id        String    @id @default(cuid())
  summary   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

model Message {
  id           String    @id @default(cuid())
  content      String
  sender       String
  images       String?   // JSON array stored as string
  driveContext String?   // JSON context from Drive search
  timestamp    DateTime  @default(now())
  chatId       String

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CleanupActivity {
  id                String   @id @default(cuid())
  userId            String
  filesDeleted      Int
  filesRequested    Int
  errors            Int
  deletedFileNames  String?  // JSON array
  timestamp         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cleanup_activities")
}

model OrganizationActivity {
  id          String   @id @default(cuid())
  userId      String
  clusterName String
  folderName  String
  filesMoved  Int
  method      String
  confidence  Float
  metadata    String?  // JSON metadata
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("organization_activities")
}